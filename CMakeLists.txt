##
# @author: Ayoub Chouak (a.chouak@protonmail.com)
# @brief:  CMakeLists for YAMPL
##
message("
 ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄       ▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄
▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░▌     ▐░░▌▐░░░░░░░░░░░▌▐░▌
▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌░▌   ▐░▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌
▐░▌       ▐░▌▐░▌       ▐░▌▐░▌▐░▌ ▐░▌▐░▌▐░▌       ▐░▌▐░▌
▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌ ▐░▐░▌ ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌
▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌▐░▌
 ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░▌   ▀   ▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌
     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░▌
     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░█▄▄▄▄▄▄▄▄▄
     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░░░░░░░░░░░▌
      ▀       ▀         ▀  ▀         ▀  ▀            ▀▀▀▀▀▀▀▀▀▀▀
      Yet Another Message Passing Library
")
message(STATUS "Configuring...")

cmake_minimum_required(VERSION 2.8.10)
project(yampl)

# Use C++14
include(cmake/YamplUtils.cmake)
USE_CXX14()

# Default install prefix
if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(CMAKE_INSTALL_PREFIX $ENV{HOME}/yampl)
endif()

# Common source files for plugins
set(YAMPL_PLUGIN_COMMON_SRCS src/ISocket.cpp src/plugin/PluginArbiter.cpp)

# PThreads
find_package(Threads)

# Common libraries (for examples and tests)
set(YAMPL_COMMON_LIBS ${CMAKE_BINARY_DIR}/libyampl.so dl uuid ${CMAKE_THREAD_LIBS_INIT})

# Include YAMPL dependencies
include(cmake/YamplDepends.cmake)

# Include directories
include_directories(include/ /usr/local/include)

# Source files
add_library(yampl SHARED
        src/plugin/PluginArbiter.cpp
        src/plugin/DynamicModule.cpp
        src/utils/utils.cpp
        src/SocketFactory.cpp
        src/ISocket.cpp
)

# Suppress -Wterminate
target_compile_options(yampl PRIVATE "-Wno-terminate")

option(WITH_EXAMPLES "Include examples" ON)

if(WITH_EXAMPLES)
    # Client-Server
    add_executable(client examples/client_server/client.cpp)
    add_executable(server examples/client_server/server.cpp)
    set_target_properties(client server
            PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/examples/client_server"
    )
    target_link_libraries(client ${YAMPL_COMMON_LIBS})
    target_link_libraries(server ${YAMPL_COMMON_LIBS})
    add_dependencies(client yampl)
    add_dependencies(server yampl)
    target_compile_options(client PRIVATE "-Wno-terminate")
    target_compile_options(server PRIVATE "-Wno-terminate")
    
    # Benchmarks
    add_executable(benchmark examples/benchmarks/benchmark.cpp)
    set_target_properties(benchmark
            PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/examples/benchmark"
    )
    target_link_libraries(benchmark ${YAMPL_COMMON_LIBS})
    add_dependencies(benchmark yampl)
    target_compile_options(benchmark PRIVATE "-Wno-terminate")
endif()

option(WITH_TESTS "Include tests" ON)

if (WITH_TESTS)
    enable_testing()
endif()

if(WITH_TESTS)
    # PluginArbiter Test
    add_executable(pluginarbiter tests/pluginarbiter.cpp)
    set_target_properties(pluginarbiter
            PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/tests"
    )
    target_link_libraries(pluginarbiter ${YAMPL_COMMON_LIBS})
    add_dependencies(pluginarbiter yampl)
    add_test(NAME pluginarbiter COMMAND pluginarbiter)

    # Dynmodule Test
    add_executable(dynmodule tests/dynmodule.cpp)
    set_target_properties(dynmodule
            PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/tests"
    )
    target_link_libraries(dynmodule ${YAMPL_COMMON_LIBS})
    add_dependencies(dynmodule yampl)
    add_test(NAME dynmodule COMMAND dynmodule WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/tests")

    # Calls Test
    add_executable(calls tests/calls.cpp)
    set_target_properties(calls
            PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/tests"
    )
    target_link_libraries(calls ${YAMPL_COMMON_LIBS})
    add_dependencies(calls yampl)
    add_test(NAME calls COMMAND calls)

    # Dest Test
    add_executable(dest tests/dest.cpp)
    set_target_properties(dest
            PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/tests"
    )
    target_link_libraries(dest ${YAMPL_COMMON_LIBS})
    add_dependencies(dest yampl)
    add_test(NAME dest COMMAND dest)

    # Size Test
    add_executable(size tests/size.cpp)
    set_target_properties(size
            PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/tests"
    )
    target_link_libraries(size ${YAMPL_COMMON_LIBS})
    add_dependencies(size yampl)
    add_test(NAME size COMMAND size)
endif()

# Libraries
target_link_libraries(yampl
    ${CMAKE_THREAD_LIBS_INIT}
    rt
    uuid
)

#
# Install step
#
set_target_properties(yampl PROPERTIES RESOURCE "${YAMPL_RESOURCES}")

# Configure yampl-env.sh.in
set(YAMPL_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}/lib")
set(YAMPL_ENV_DIR "/etc/profile.d")

configure_file(config/yampl-env.sh.in ${CMAKE_BINARY_DIR}/scripts/yampl-env.sh @ONLY)
configure_file(config/uninstall.sh.in ${CMAKE_BINARY_DIR}/scripts/uninstall.sh @ONLY)
configure_file(config/.yamplrc.in ${CMAKE_BINARY_DIR}/scripts/.yamplrc @ONLY)
configure_file(config/yampl.pc.in ${CMAKE_BINARY_DIR}/scripts/yampl.pc @ONLY)

# Install libraries
install(TARGETS yampl
        RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin/yampl
        LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/yampl
        PERMISSIONS OWNER_READ OWNER_WRITE
)

# Install examples
install(DIRECTORY ${CMAKE_BINARY_DIR}/examples
        DESTINATION ${CMAKE_INSTALL_PREFIX}
        PATTERN "*"
        PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
)

# Install public header files
install(DIRECTORY include
        DESTINATION ${CMAKE_INSTALL_PREFIX}
        FILES_MATCHING
        PATTERN "*.h"
        PATTERN "*.hpp"
        PERMISSIONS OWNER_READ OWNER_WRITE
)

# Install .yamplrc to ~
install(FILES "${CMAKE_BINARY_DIR}/scripts/.yamplrc"
        DESTINATION $ENV{HOME}
        PERMISSIONS OWNER_READ OWNER_WRITE
)

# Install yampl.pc configuration file
install(FILES "${CMAKE_BINARY_DIR}/scripts/yampl.pc"
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig
        PERMISSIONS OWNER_READ OWNER_WRITE
)

# Include plugins
file(GLOB_RECURSE YAMPL_PLUGIN_CMAKE_FILES "plugins/*.conf.cmake")
foreach(YAMPL_CMAKE_FILE ${YAMPL_PLUGIN_CMAKE_FILES})
    string(REGEX REPLACE "(\\.conf\\.cmake)$" "" YAMPL_PLUGIN_NAME ${YAMPL_CMAKE_FILE})
    include(${YAMPL_CMAKE_FILE})
endforeach(YAMPL_CMAKE_FILE)
